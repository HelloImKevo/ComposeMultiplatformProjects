[versions]
agp = "8.2.0"
android-compileSdk = "34"
android-minSdk = "24"
android-targetSdk = "34"
androidx-activityCompose = "1.9.0"
androidx-appcompat = "1.7.0"
androidx-constraintlayout = "2.1.4"
androidx-core-ktx = "1.13.1"
androidx-espresso-core = "3.6.0"
androidx-material = "1.12.0"
androidx-test-junit = "1.2.0"
compose-plugin = "1.6.11"
junit = "4.13.2"
kotlin = "2.0.0"
compose = "1.6.2"
ktor = "2.3.9"
date-time = "0.5.0"
multiplatformSettings = "1.1.1"
voyager = "1.0.0"
koinCore = "3.5.3"
realm = "1.13.0"
coroutines = "1.8.0"
statelyCommon = "2.0.5"

[libraries]
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "androidx-core-ktx" }
androidx-test-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-junit" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "androidx-espresso-core" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "androidx-appcompat" }
androidx-material = { group = "com.google.android.material", name = "material", version.ref = "androidx-material" }
androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "androidx-constraintlayout" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }

compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }

multiplatform-settings-no-arg = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatformSettings" }
multiplatform-settings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatformSettings" }

# Voyager: Compose on Warp Speed. A multiplatform navigation library built for,
# and seamlessly integrated with, Jetpack Compose. Create scalable Single-Activity
# apps powered by a pragmatic API.
# https://github.com/adrielcafe/voyager
voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyager" }
voyager-screen-model = { module = "cafe.adriel.voyager:voyager-screenmodel", version.ref = "voyager" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyager" }
voyager-koin = { module = "cafe.adriel.voyager:voyager-koin", version.ref = "voyager" }

# Koin: Koin is a pragmatic lightweight dependency injection framework for Kotlin developers.
# Koin is a DSL, a light container and a pragmatic API.
# https://github.com/InsertKoinIO/koin
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koinCore" }

# Ktor: Ktor is an asynchronous framework for creating microservices, web applications and more.
# https://github.com/ktorio/ktor
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }

# Ktor client for JVM, Android, and Native.
# https://ktor.io/docs/client-engines.html#cio
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }

# kotlinx-datetime: A multiplatform Kotlin library for working with date and time.
# https://github.com/Kotlin/kotlinx-datetime
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "date-time" }

# realm by MongoDB: Realm is a mobile database that runs directly inside phones,
# tablets or wearables. Realm’s object-oriented data model is simple to learn,
# doesn’t need an ORM, and lets you write less code.
# https://github.com/realm/realm-kotlin
mongodb-realm = { module = "io.realm.kotlin:library-base", version.ref = "realm" }
kotlin-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }

# Stately: Stately is a state utility library to facilitate state management in
# Kotlin Multiplatform. It was originally written to facilitate development with
# the strict Kotlin/Native memory model. Stately currently provides concurrencly
# primitives and concurrent collections.
# https://github.com/touchlab/Stately
stately-common = { module = "co.touchlab:stately-common", version.ref = "statelyCommon" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "compose-plugin" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinxSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
realm-plugin = { id = "io.realm.kotlin", version.ref = "realm" }
